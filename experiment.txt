                              ____________

                               EXPERIMENT

                                 zqy787
                              ____________


Table of Contents
_________________

1 expriment
.. 1.1 setup
..... 1.1.1 dataset
..... 1.1.2 expriment environment
..... 1.1.3 labriary
.. 1.2 expriment1 - simhash
..... 1.2.1 steps
..... 1.2.2 purpose
..... 1.2.3 result
..... 1.2.4 result realization
.. 1.3 experiment2 - minhash
..... 1.3.1 steps
..... 1.3.2 result
..... 1.3.3 result realization
.. 1.4 experiment 3 -- minhashensemble
..... 1.4.1 step
..... 1.4.2 result
..... 1.4.3 result realization


1 expriment
===========

1.1 setup
~~~~~~~~~

1.1.1 dataset
-------------

  we use the core message of Probase to realize our models.This database
  contains about 33000000 ISA relationships and most of them are very
  small. By filtering out ISA realationships which are too ambigous or
  too tiny,we minimize data. To be specific, we choose concepts witch
  are related with from 8 to 10000 instances to do next research.


1.1.2 expriment environment
---------------------------

  this expriment is execute on Ubuntu 16.04 LTS. Our program language
  envornement is Python 2.7. We run all the models with Intel® Core™
  i5-4200U CPU @ 1.60GHz × 4 and 3.6 GB RAM.


1.1.3 labriary
--------------

  Minhash amd minhashensmble we use a python labriary called
  datasketch. But when we mention about simhash, there is no such great
  simhash labriary so we have to realized one by ourselves.


1.2 expriment1 - simhash
~~~~~~~~~~~~~~~~~~~~~~~~

1.2.1 steps
-----------

  First,we think about computer out the intersections directly. But soon
  we realized that the data are too large to store and realize. Inspired
  by the method of document duplicate check, Simhash is our first choice
  to simpilfy our expriment.  We read all the 33000000 realationships
  and class them by concepts.For each concept, we compare their simhash
  with each other.By machine learning method,we find the thershold that
  divides the intersections into contradictory ones and the other. With
  rules, we find all the errors in those intersections.First we will
  conduct two instance - concept pair then we have to only store the
  smaller instance - concept as error.


1.2.2 purpose
-------------

  the main purpose of simhash is to avoid the direction computation of
  intersections.Compared with minhash we used in Exp 2, simhash pays
  more attention to weight. When computing the simhash value,weight
  plays more important part than minhash. In that way,we take advantage
  of all datas.


1.2.3 result
------------

  the result of simhash is not great. We find almost 20000 errors but
  the accracy is about 60%. the result is so unacceptable that we
  immediately try another way to solve the problem.  Also the speed of
  simhash seems slow because we build simhash library by ourselves. But
  simhash just take little memory for we only need to store 128 bit data
  for each concept sets.


1.2.4 result realization
------------------------

  By our analysis,we figure out that the simhash values are so closed
  that it is almost impossiable to divide them by thershold. When we
  learn more about simhash, we find simhash is used in those sets which
  sacle is almost the same. But oour sets are very different from each
  other, witch means simhash is not a suitable way.


1.3 experiment2 - minhash
~~~~~~~~~~~~~~~~~~~~~~~~~

1.3.1 steps
-----------

  With the failure of simhash, we try another method of document
  duplicate check called minhash.Our experiment step is just like
  experiment 1 but we replace sinhash with minhash. With introduction of
  datasketch labriary, our work is well reduced.


1.3.2 result
------------

  Minhash shows a very better version than simhash.Although this time we
  can find only about 13000 relationships, the accracy raise up from 60%
  to 75%.This a good step compared with simhash but there are
  improvement.  When it comes to speed,we use a technique called
  minhashLSH, which raises our speed a lot. Alough we don't take the
  weight into computation, in both accracy and speed ,minhash plays
  better.


1.3.3 result realization
------------------------

  The main reason that minhash works better than simhash is that minhash
  is not that related with sacle. The big sets and small ones will
  conduct very small values.The value are so small that we can easily
  take 0 as our threshold and we can also have very good result.  In the
  speed part, minhash works well becasuse we optimize our method with
  double hashing.  However,we can easily find that there is something
  wrong relationships reminaing in the errors. Take maize - unmalted
  cereal error for example,although their weight is 1 ,they are correct
  answers.To fix this problem, we focus on why those point will be
  extracted.As we can see , the error is from two instance-concept
  pair:maize - unmalted cereal and maize - crop . Those two concept
  unmalted cereal and crop should not be extracted becasuse one is a
  subset of another. So in next experiment we will solve this problem.


1.4 experiment 3 -- minhashensemble
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.4.1 step
----------

  when our minhash comes to dead end , we find minhash_ensemlbe in
  datasketch. By using this, we can conduct that the intersection's
  percentage of its coneceps sets. With this technique, we can separate
  subsets from sets.  So when we conduct minhash of each concept set,we
  will compute minhash_semebble for futher use. Using machine learning
  method,we conduct a threshod which divide contradictry sets from
  subsets. When we find the two sets' minhash value is smaller than
  minhash thershold,we have to confirm that the intersections plays
  small party in each set.


1.4.2 result
------------

  this is our best result and this our final result. This time we find
  about 70000 error and the accracy is 86%. It is better than Exp 1 or
  the Exp 2.  But the memory becomes the problem. For we have to store
  all the subsets in memory and in our environment it seems impossible
  to run. So we have to use other similar but better environment to
  produce all the result.


1.4.3 result realization
------------------------

  This time we finally realize our goal: find contradictry sets and
  extract error in those set. But there is further experiment for us to
  do. First there is some concepts which is similar but for some reason
  they don't share some instance. For this problem we have to use bigger
  knowledge database which have more information. Second Some instances
  point to same object like color and colour ,but we wll represent them
  as different one. To solve this question we have to use synonym
  dictionary. When we use minhash to conduct intersection, we will not
  add the word itself but the word ID in synonym dictionary instead.When
  we conduct distance we will take world distance into
  consideration. This part is how to improve our result.
